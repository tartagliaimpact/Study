Основные парадигмы объектно-ориентированного программирования:
Инкапсуляция
Наследование
Полиморфизм
Абстракция
Класс в объектно-ориентированном программировании - это шаблон или формальное описание объекта, определяющее его состояние (переменные класса) и поведение (методы класса).

Интерфейс в объектно-ориентированном программировании определяет набор методов, которые класс, реализующий данный интерфейс, должен иметь. Интерфейсы позволяют создавать абстрактные типы данных.

Абстракция - это процесс выделения существенных характеристик объекта и игнорирования несущественных. Абстракция позволяет создавать модели объектов, упрощая их понимание и работу с ними.

Инкапсуляция - это механизм, который позволяет скрывать детали реализации объекта от других объектов, обеспечивая доступ только к публичным методам и свойствам объекта.

Наследование - это механизм, который позволяет создавать новый класс на основе существующего, наследуя его свойства и методы. Наследование позволяет создавать иерархию классов и повторно использовать код.

Полиморфизм - это механизм, который позволяет использовать объекты разных классов с помощью одного и того же интерфейса. Полиморфизм позволяет упростить код, уменьшить дублирование и обеспечить гибкость программы.

Поле класса - это переменная, которая хранит данные внутри объекта класса. Свойство класса - это метод, который позволяет получить или установить значение поля.

Событие - это механизм, который позволяет классам оповещать другие классы о произошедших событиях. События используются для реализации обратного вызова и асинхронной обработки данных.

Индексатор - это метод, который позволяет получить или установить значение объекта по индексу. Индексаторы используются для упрощения работы с коллекциями объектов.

UML (Unified Modeling Language) - это язык для описания объектно-ориентированных систем. UML используется для создания диаграмм классов, диаграмм последовательностей, диаграмм состояний и других.

В UML стереотипы используются для добавления дополнительной информации к элементам модели. Стереотипы могут добавлять новые свойства, ограничения, атрибуты и отношения к элементам модели.
Например, можно определить стереотип "database" для класса в UML-диаграмме классов. Это позволит указать, что данный класс является таблицей в базе данных, и добавить дополнительные свойства, такие как имя таблицы или ограничения на столбцы.
Стереотипы также позволяют определять специфические свойства для элементов модели, которые не поддерживаются стандартной нотацией UML. Например, стереотип "singleton" может быть определен для класса, чтобы указать, что объект этого класса должен существовать только в единственном экземпляре.
Использование стереотипов позволяет расширять функциональность модели и улучшать ее читаемость и понятность.